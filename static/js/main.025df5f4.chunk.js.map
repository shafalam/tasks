{"version":3,"sources":["components/TextArea.tsx","components/TasksList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","backgroundColor","palette","background","default","MultilineTextFields","props","classes","className","noValidate","autoComplete","style","position","zIndex","onSubmit","handleSubmit","TextField","id","label","multiline","rows","defaultValue","variant","onChange","handleChange","type","TaskList","aTask","state","task","handleCheck","index","newTasks","taskCheck","check","setState","handleEdit","initialEditStatus","edit","console","log","addTaskHandler","push","description","rating","event","newTaskDescription","currentTarget","value","preventDefault","handleRating","newValue","sort","a","b","this","editText","map","alignContent","onClick","List","key","labelId","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","ListItemText","disableTypography","textDecoration","primary","itemID","Rating","name","ListItemSecondaryAction","IconButton","aria-label","React","Component","withStyles","maxWidth","paper","withTheme","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.025df5f4.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(0),\n        width: 200,\n        backgroundColor: theme.palette.background.default \n      },\n    },\n  }),\n);\n\ninterface MultilineTextFieldsProps{\n  taskId?: number;\n  handleChange(event: React.ChangeEvent<HTMLTextAreaElement>):void;\n  handleSubmit(event: React.FormEvent<HTMLFormElement>): void;\n}\n\nconst MultilineTextFields: React.FunctionComponent<MultilineTextFieldsProps> = (props) => {\n  const classes = useStyles();\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\" style={{position: \"absolute\", zIndex: 2}} onSubmit={props.handleSubmit}>\n      <div>\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Task\"\n          multiline\n          rows=\"5\"\n          defaultValue=\"\"\n          variant=\"filled\"\n          onChange={props.handleChange}\n        />\n      </div>\n      <button type=\"submit\">Add Task</button>   \n    </form>\n  );\n}\n\nexport default MultilineTextFields;","import React from 'react';\r\nimport { Theme, withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\n// icon import\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\n// import custom components \r\nimport MultilineTextFields from \"./TextArea\"\r\n\r\nconst styles = (theme: Theme) =>\r\n({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper\r\n    }\r\n  });\r\n\r\ninterface TaskProperty{\r\n  check: boolean;\r\n  description: string;\r\n  rating: number|null;\r\n  edit: boolean;\r\n}\r\n\r\ninterface TaskListProperty{\r\n  classes: any\r\n}\r\n\r\nclass TaskList extends React.Component<TaskListProperty> {\r\n  \r\n  // aTask:string[] = [];\r\n  \r\n  // initialEdit: boolean[] = [];\r\n\r\n  // initialTask: boolean[] = [];\r\n\r\n  // aRating: (number| null)[] = [];\r\n\r\n  aTask: TaskProperty[] = [];\r\n\r\n  // state = {\r\n  //   task: this.aTask,\r\n  //   edit: this.initialEdit,\r\n  //   taskCheck: this.initialTask,\r\n  //   rating: this.aRating\r\n  // }\r\n\r\n  state = {\r\n    task: this.aTask\r\n  }\r\n\r\n  handleCheck = (index: number) => () => {\r\n    const newTasks = [...this.state.task];\r\n    const taskCheck = newTasks[index].check;\r\n    newTasks[index].check = !taskCheck;\r\n    this.setState({task: newTasks});\r\n  };\r\n\r\n  handleEdit = (index: number) => {\r\n    const initialEditStatus = this.state.task[index].edit;\r\n    const newTasks = [...this.state.task];\r\n    newTasks[index].edit = !initialEditStatus;\r\n    this.setState({task: newTasks});\r\n    console.log(\"each list is clicked for edit\" + this.state.task[index].edit + index);\r\n  }\r\n\r\n  addTaskHandler = () => {\r\n    const aTask: TaskProperty = {\r\n      check: false,\r\n      description: \"Good new task\",\r\n      rating: null,\r\n      edit: false\r\n    };\r\n\r\n    // copying the previous tasks\r\n    const newTasks = [...this.state.task];\r\n    newTasks.push(aTask);\r\n\r\n    this.setState({task: newTasks});\r\n    console.log(\"task added. \");\r\n  }\r\n\r\n  handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>, index: number) => {\r\n    const newTaskDescription = event.currentTarget.value;\r\n    console.log(newTaskDescription);\r\n    const newTasks = [...this.state.task];\r\n    newTasks[index].description = newTaskDescription;\r\n    this.setState({task: newTasks});\r\n  }\r\n\r\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>, index: number) => {\r\n    event.preventDefault();\r\n    this.handleEdit(index);\r\n  };\r\n\r\n  handleRating = (newValue: number|null, index: number)=> {\r\n    const newTasks: TaskProperty[] = [...this.state.task];\r\n    newTasks[index].rating = newValue;\r\n    newTasks.sort((a, b) => {\r\n      if((a.rating != null) && (b.rating != null)){\r\n        return b.rating - a.rating;\r\n      }else{\r\n        return 0;\r\n      }\r\n    });\r\n    console.log(\"index: \" + index + \" rating: \" + newValue);\r\n    this.setState({task: newTasks});\r\n  }\r\n \r\n  // orderTasks = () => {\r\n  //   const newTasks = [...this.state.task];\r\n  //   newTasks.sort((a, b) => {\r\n  //     if(a.rating != null || b.rating != null){\r\n  //       return b.rating - a.rating;\r\n  //     }else{\r\n  //       return 0;\r\n  //     }\r\n  //   });\r\n\r\n  //   this.setState({task: newTasks});\r\n  // }\r\n  \r\n  render(){\r\n    console.log(\"states are: \", this.state);\r\n\r\n    const { classes } = this.props;\r\n    const editText = this.state.task.map((value, index) => {\r\n      if(value.edit){\r\n        return (<MultilineTextFields handleChange={(event: React.ChangeEvent<HTMLTextAreaElement>)=>this.handleChange(event, index)} \r\n        handleSubmit={(event: React.FormEvent<HTMLFormElement>) => this.handleSubmit(event,index)}/>)\r\n      } else\r\n         return null;\r\n    });\r\n    return (\r\n      <div>\r\n        <div style={{alignContent: \"center\", margin: \"0.5%\"}}>\r\n          <AddCircleIcon onClick={this.addTaskHandler}/>\r\n          <h3 style={{margin: \"0px\"}}>Add a task</h3>\r\n        </div>\r\n        {editText}\r\n        <List className={classes.root}>\r\n        {this.state.task.map((value, key) => {\r\n          const labelId = `checkbox-list-label-${value}`;\r\n          return (\r\n            <ListItem key={key} role={undefined} dense button>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  edge=\"start\"\r\n                  checked= {value.check}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{ 'aria-labelledby': labelId }}\r\n                  onClick={this.handleCheck(key)}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText disableTypography style={value.check?{textDecoration: \"line-through\"}: undefined} id={labelId} primary={value.description} />\r\n              <ListItemIcon itemID={key+\"rating\"}>\r\n                  <Rating name={\"simple-controlled\"+key} value={value.rating} \r\n                  onChange={(event: React.ChangeEvent<{}>, newValue:number|null)=> {\r\n                    console.log(\"rating key: \" + key);\r\n                    this.handleRating( newValue, key)}\r\n                  } />\r\n              </ListItemIcon>\r\n              <ListItemSecondaryAction onClick={() => this.handleEdit(key)}>\r\n                <IconButton edge=\"end\" aria-label=\"comments\" >\r\n                  <CommentIcon />\r\n                </IconButton >\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(TaskList);","import React from 'react';\r\nimport './App.css';\r\n\r\nimport TaskList from \"./components/TasksList\"\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <TaskList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}