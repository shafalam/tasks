{"version":3,"sources":["components/TextArea.tsx","components/TasksList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","backgroundColor","palette","background","default","MultilineTextFields","props","classes","className","noValidate","autoComplete","style","position","zIndex","onSubmit","handleSubmit","TextField","id","label","multiline","rows","defaultValue","variant","onChange","handleChange","type","TaskList","aTask","bTask","state","completedTask","inCompletedTask","handleCheck","index","newTasks","thatTask","taskCheck","check","date","Date","console","log","getUTCDate","push","splice","setState","handleEdit","initialEditStatus","edit","addTaskHandler","description","rating","event","newTaskDescription","currentTarget","value","preventDefault","handleRating","newValue","sort","a","b","this","editText","map","alignContent","onClick","display","List","subheader","ListSubheader","component","key","labelId","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","ListItemText","disableTypography","textDecoration","primary","itemID","Rating","name","max","ListItemSecondaryAction","IconButton","aria-label","toUTCString","React","Component","withStyles","maxWidth","paper","withTheme","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ddd3ad28.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(0),\n        width: 200,\n        backgroundColor: theme.palette.background.default \n      },\n    },\n  }),\n);\n\ninterface MultilineTextFieldsProps{\n  taskId?: number;\n  handleChange(event: React.ChangeEvent<HTMLTextAreaElement>):void;\n  handleSubmit(event: React.FormEvent<HTMLFormElement>): void;\n}\n\nconst MultilineTextFields: React.FunctionComponent<MultilineTextFieldsProps> = (props) => {\n  const classes = useStyles();\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\" style={{position: \"absolute\", zIndex: 2}} onSubmit={props.handleSubmit}>\n      <div>\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Task\"\n          multiline\n          rows=\"5\"\n          defaultValue=\"\"\n          variant=\"filled\"\n          onChange={props.handleChange}\n        />\n      </div>\n      <button type=\"submit\">Add Task</button>   \n    </form>\n  );\n}\n\nexport default MultilineTextFields;","import React from 'react';\r\nimport { Theme, withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\n// icon import\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\n// import custom components \r\nimport MultilineTextFields from \"./TextArea\"\r\n\r\nconst styles = (theme: Theme) =>\r\n  ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: '360em',\r\n      backgroundColor: theme.palette.background.paper\r\n    }\r\n  });\r\n\r\ninterface TaskProperty {\r\n  check: boolean;\r\n  description: string;\r\n  rating: number | null;\r\n  edit: boolean;\r\n  date?: Date;\r\n}\r\n\r\n// for styles\r\ninterface TaskListProperty {\r\n  classes: any\r\n}\r\n\r\nclass TaskList extends React.Component<TaskListProperty> {\r\n\r\n  aTask: TaskProperty[] = [];\r\n  bTask: TaskProperty[] = [];\r\n\r\n  state = {\r\n    completedTask: this.aTask,\r\n    inCompletedTask: this.bTask\r\n  }\r\n\r\n  handleCheck = (index: number) => () => {\r\n    const newTasks = [...this.state.inCompletedTask];\r\n    const thatTask = newTasks[index];\r\n    const taskCheck = newTasks[index].check;\r\n    thatTask.check = !taskCheck;\r\n    thatTask.date = new Date();\r\n    console.log(\"utc day \" + thatTask.date.getUTCDate());\r\n    //newTasks[index].check = !taskCheck;\r\n    const completedTask = [...this.state.completedTask];\r\n\r\n    completedTask.push(thatTask);\r\n    newTasks.splice(index, 1);\r\n    this.setState({ inCompletedTask: newTasks, completedTask: completedTask });\r\n  };\r\n\r\n  handleEdit = (index: number) => {\r\n    const initialEditStatus = this.state.inCompletedTask[index].edit;\r\n    const newTasks = [...this.state.inCompletedTask];\r\n    newTasks[index].edit = !initialEditStatus;\r\n    this.setState({ inCompletedTask: newTasks });\r\n    console.log(\"each list is clicked for edit\" + this.state.inCompletedTask[index].edit + index);\r\n  }\r\n\r\n  addTaskHandler = () => {\r\n    const aTask: TaskProperty = {\r\n      check: false,\r\n      description: \"Good new task\",\r\n      rating: null,\r\n      edit: false\r\n    };\r\n\r\n    // copying the previous tasks\r\n    const newTasks = [...this.state.inCompletedTask];\r\n    newTasks.push(aTask);\r\n\r\n    this.setState({ inCompletedTask: newTasks });\r\n    console.log(\"task added. \");\r\n  }\r\n\r\n  handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>, index: number) => {\r\n    const newTaskDescription = event.currentTarget.value;\r\n    console.log(newTaskDescription);\r\n    const newTasks = [...this.state.inCompletedTask];\r\n    newTasks[index].description = newTaskDescription;\r\n    this.setState({ inCompletedTask: newTasks });\r\n  }\r\n\r\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>, index: number) => {\r\n    event.preventDefault();\r\n    this.handleEdit(index);\r\n  };\r\n\r\n  handleRating = (newValue: number | null, index: number) => {\r\n    const newTasks: TaskProperty[] = [...this.state.inCompletedTask];\r\n    newTasks[index].rating = newValue;\r\n\r\n    // when a rating is given it sorts the tasks\r\n    newTasks.sort((a, b) => {\r\n      if ((a.rating != null) && (b.rating != null)) {\r\n        return b.rating - a.rating;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    console.log(\"index: \" + index + \" rating: \" + newValue);\r\n    this.setState({ inCompletedTask: newTasks });\r\n  }\r\n\r\n\r\n  render() {\r\n    console.log(\"states are: \", this.state);\r\n\r\n    const { classes } = this.props;\r\n\r\n    // TextArea for adding tasks\r\n    const editText = this.state.inCompletedTask.map((value, index) => {\r\n      if (value.edit) {\r\n        return (<MultilineTextFields handleChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => this.handleChange(event, index)}\r\n          handleSubmit={(event: React.FormEvent<HTMLFormElement>) => this.handleSubmit(event, index)} />)\r\n      } else\r\n        return null;\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div style={{ alignContent: \"center\", margin: \"0.5%\" }}>\r\n          <AddCircleIcon onClick={this.addTaskHandler} />\r\n          <h3 style={{ margin: \"0px\" }}>Add a task</h3>\r\n        </div>\r\n        <div style={{ display: \"flex\" }}>\r\n          {editText}\r\n          <List className={classes.root} subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              New Tasks\r\n        </ListSubheader>\r\n          }>\r\n            {this.state.inCompletedTask.map((value, key) => {\r\n              const labelId = `checkbox-list-label-${value}`;\r\n              return (\r\n                <ListItem key={key} role={undefined} dense button>\r\n                  <ListItemIcon>\r\n                    <Checkbox\r\n                      edge=\"start\"\r\n                      checked={value.check}\r\n                      tabIndex={-1}\r\n                      disableRipple\r\n                      inputProps={{ 'aria-labelledby': labelId }}\r\n                      onClick={this.handleCheck(key)}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText disableTypography style={value.check ? { textDecoration: \"line-through\" } : undefined} id={labelId} primary={value.description} />\r\n                  <ListItemIcon itemID={key + \"rating\"}>\r\n                    <Rating name={\"simple-controlled\" + key} value={value.rating} max={3}\r\n                      onChange={(event: React.ChangeEvent<{}>, newValue: number | null) => {\r\n                        console.log(\"rating key: \" + key);\r\n                        this.handleRating(newValue, key)\r\n                      }\r\n                      } />\r\n                  </ListItemIcon>\r\n                  <ListItemSecondaryAction onClick={() => this.handleEdit(key)}>\r\n                    <IconButton edge=\"end\" aria-label=\"comments\" >\r\n                      <CommentIcon />\r\n                    </IconButton >\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n          <List className={classes.root} subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Completed Tasks\r\n           </ListSubheader>\r\n          }>\r\n            {this.state.completedTask.map((value, index) => {\r\n              const labelId = `checkbox-list-label-${value}`;\r\n              return (\r\n                <ListItem key={index} role={undefined} dense button>\r\n                  <ListItemText disableTypography style={value.check ? { textDecoration: \"line-through\" } : undefined}\r\n                    id={labelId} primary={value.description} />\r\n                  <ListItemText primary={value.date?.toUTCString()} />\r\n                  {/* <p>{value.date?.toUTCString()}</p> */}\r\n                </ListItem>\r\n\r\n              );\r\n            })}\r\n          </List>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// \"TaskList\" is wrapped with \"withStyles\", so that \"styles\" is applied at this component\r\nexport default withStyles(styles, { withTheme: true })(TaskList);","import React from 'react';\r\nimport './App.css';\r\n\r\nimport TaskList from \"./components/TasksList\"\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <TaskList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}