{"version":3,"sources":["components/TextArea.tsx","components/TasksList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","backgroundColor","palette","background","default","MultilineTextFields","props","classes","className","noValidate","autoComplete","style","position","zIndex","onSubmit","handleSubmit","TextField","id","label","multiline","rows","defaultValue","variant","onChange","handleChange","type","maxWidth","paper","CheckboxList","React","useState","task","setTask","edit","setEdit","taskCheck","setTaskCheck","handleEdit","num","initialEditStatus","newEdit","console","log","editText","map","value","index","event","newTask","currentTarget","allTasks","preventDefault","onClick","immutableTask","push","immutableEdit","List","key","labelId","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","editedTask","taskStatus","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.011a0b37.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(0),\n        width: 200,\n        backgroundColor: theme.palette.background.default \n      },\n    },\n  }),\n);\n\ninterface MultilineTextFieldsProps{\n  taskId?: number;\n  handleChange(event: React.ChangeEvent<HTMLTextAreaElement>):void;\n  handleSubmit(event: React.FormEvent<HTMLFormElement>): void;\n}\n\nconst MultilineTextFields: React.FunctionComponent<MultilineTextFieldsProps> = (props) => {\n  const classes = useStyles();\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\" style={{position: \"absolute\", zIndex: 2}} onSubmit={props.handleSubmit}>\n      <div>\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Task\"\n          multiline\n          rows=\"5\"\n          defaultValue=\"\"\n          variant=\"filled\"\n          onChange={props.handleChange}\n        />\n      </div>\n      <button type=\"submit\">Add Task</button>   \n    </form>\n  );\n}\n\nexport default MultilineTextFields;","import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\n\r\n\r\n// icon import\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\n// import custom components \r\nimport MultilineTextFields from \"./TextArea\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CheckboxList() {\r\n  const classes = useStyles();\r\n  const aTask:string[] = [];\r\n  const [task, setTask] = React.useState(aTask);\r\n  let initialEdit: boolean[] = [];\r\n  const [edit, setEdit] = React.useState(initialEdit);\r\n  let initialTask: boolean[] = [];\r\n  const [taskCheck, setTaskCheck] = React.useState(initialTask);\r\n\r\n  const handleToggle = (index: number) => () => {\r\n    const editedTask = [...taskCheck];\r\n    const taskStatus = editedTask[index];\r\n    editedTask[index] = !taskStatus;\r\n    setTaskCheck(editedTask);\r\n  };\r\n\r\n  const handleEdit = (num: number) => {\r\n    const initialEditStatus = edit[num];\r\n    const newEdit = [...edit];\r\n    newEdit[num] = !initialEditStatus;\r\n    setEdit(newEdit);\r\n    console.log(\"each list is clicked for edit\" + edit + num);\r\n  }\r\n\r\n  const addTaskHandler = () => {\r\n    console.log(\"task added\");\r\n    const newTask: boolean = false;\r\n    const immutableTask = [...taskCheck];\r\n    immutableTask.push(newTask);\r\n    setTaskCheck(immutableTask);\r\n    const newEdit: boolean = false;\r\n    const immutableEdit = [...edit];\r\n    immutableEdit.push(newEdit);\r\n    setEdit(immutableEdit);\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>, index: number) => {\r\n    const newTask = event.currentTarget.value;\r\n    console.log(newTask);\r\n    const allTasks = [...task];\r\n    allTasks[index] = newTask;\r\n    setTask(allTasks);\r\n  }\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>, index: number) => {\r\n    event.preventDefault();\r\n    handleEdit(index);\r\n  };\r\n\r\n  const editText = edit.map((value, index) => {\r\n    if(value){\r\n      return <MultilineTextFields handleChange={(event: React.ChangeEvent<HTMLTextAreaElement>)=>handleChange(event, index)} \r\n      handleSubmit={(event: React.FormEvent<HTMLFormElement>) => handleSubmit(event,index)}/>\r\n    }\r\n  })\r\n  console.log(\"task status\" + taskCheck);\r\n  console.log(\"edit status\" + edit);\r\n  return (\r\n    <div>\r\n      <div>\r\n        <AddCircleIcon onClick={addTaskHandler}/>\r\n        <h3>Add a task</h3>\r\n      </div>\r\n      {editText}\r\n      <List className={classes.root}>\r\n      {taskCheck.map((value, key) => {\r\n        const labelId = `checkbox-list-label-${value}`;\r\n        return (\r\n          <ListItem key={key} role={undefined} dense button>\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked= {value}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n                onClick={handleToggle(key)}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText id={labelId} primary={task[key]} />\r\n            <ListItemSecondaryAction onClick={() => handleEdit(key)}>\r\n              <IconButton edge=\"end\" aria-label=\"comments\" >\r\n                <CommentIcon />\r\n              </IconButton >\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n    </div>\r\n    \r\n  );\r\n}","import React from 'react';\nimport './App.css';\n\nimport CheckboxList from \"./components/TasksList\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CheckboxList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}